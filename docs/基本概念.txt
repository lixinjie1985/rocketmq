整体组成
一个主节点和多个从节点组成一个broker，它们具有相同的brokerName，且brokerId为0的自动成为主节点，非0的成为从节点
多个broker一起组成一个MQ集群，broker中的每个节点有多个队列，只有主节点可以接受写请求，主、从节点都可以接受读请求
一个topic可以对应于多个broker的多个队列，消息将循环地发送给多个broker中的多个队列

应用场景
MQ 可应用在多个领域，包括异步通信解耦、企业解决方案、金融支付、电信、电子商务、快递物流、广告营销、社交、即时通信、手游、视频、物联网、车联网等。

MQ 可以应用但不局限于以下业务场景：
一对多，多对多异步解耦，基于发布订阅模型，对分布式应用进行异步解耦，增加应用的水平扩展能力。
削峰填谷，大促等流量洪流突然来袭时，MQ 可以缓冲突发流量，避免下游订阅系统因突发流量崩溃。
日志监控，作为重要日志的监控通信管道，将应用日志监控对系统性能影响降到最低。
消息推送，为社交应用和物联网应用提供点对点推送，一对多广播式推送的能力。
金融报文，发送金融报文，实现金融准实时的报文传输，可靠安全。
电信信令，将电信信令封装成消息，传递到各个控制终端，实现准实时控制和信息传递。

名词解释
Message Queue
消息队列，阿里云商用的专业消息中间件，是企业级互联网架构的核心产品，提供基于高可用分布式集群技术搭建的消息发布订阅、轨迹查询、资源统计、定时（延时）、监控报警等一系列消息云服务。

Message
消息，消息队列中信息传递的载体。

Message ID
消息的全局唯一标识，由 MQ 系统自动生成，唯一标识某条消息。

Message Key
消息的业务标识，由消息生产者（Producer）设置，唯一标识某个业务逻辑。

Topic
消息主题，一级消息类型，通过 Topic 对消息进行分类。

Tag
消息标签，二级消息类型，用来进一步区分某个 Topic 下的消息分类。

Producer
消息生产者，也称为消息发布者，负责生产并发送消息。

Producer ID
一类 Producer 的标识，这类 Producer 通常生产并发送一类消息，且发送逻辑一致。

Producer 实例
Producer 的一个对象实例，不同的 Producer 实例可以运行在不同进程内或者不同机器上。Producer 实例线程安全，可在同一进程内多线程之间共享。

Consumer
消息消费者，也称为消息订阅者，负责接收并消费消息。

Consumer ID
一类 Consumer 的标识，这类 Consumer 通常接收并消费一类消息，且消费逻辑一致。

Consumer 实例
Consumer 的一个对象实例，不同的 Consumer 实例可以运行在不同进程内或者不同机器上。一个 Consumer 实例内配置线程池消费消息。

集群消费
一个 Consumer ID 所标识的所有 Consumer 平均分摊消费消息。例如某个 Topic 有 9 条消息，一个 Consumer ID 有 3 个 Consumer 实例，那么在集群消费模式下每个实例平均分摊，只消费其中的 3 条消息。

广播消费
一个 Consumer ID 所标识的所有 Consumer 都会各自消费某条消息一次。例如某个 Topic 有 9 条消息，一个 Consumer ID 有 3 个 Consumer 实例，那么在广播消费模式下每个实例都会各自消费 9 条消息。

定时消息
Producer 将消息发送到 MQ 服务端，但并不期望这条消息立马投递，而是推迟到在当前时间点之后的某一个时间投递到 Consumer 进行消费，该消息即定时消息。

延时消息
Producer 将消息发送到 MQ 服务端，但并不期望这条消息立马投递，而是延迟一定时间后才投递到 Consumer 进行消费，该消息即延时消息。

消息堆积
Producer 已经将消息发送到 MQ 服务端，但由于 Consumer 消费能力有限，未能在短时间内将所有消息正确消费掉，此时在 MQ 服务端保存着未被消费的消息，该状态即消息堆积。

消息过滤
订阅者可以根据消息标签（Tag）对消息进行过滤，确保订阅者最终只接收被过滤后的消息类型。消息过滤在 MQ 服务端完成。

消息轨迹
在一条消息从发布者发出到订阅者消费处理过程中，由各个相关节点的时间、地点等数据汇聚而成的完整链路信息。通过消息轨迹，用户能清晰定位消息从发布者发出，经由 MQ 服务端，投递给消息订阅者的完整链路，方便定位排查问题。

重置消费位点
以时间轴为坐标，在消息持久化存储的时间范围内（默认3天），重新设置消息订阅者对其订阅 Topic 的消费进度，设置完成后订阅者将接收设定时间点之后由消息发布者发送到 MQ 服务端的消息。


https://github.com/alibaba/RocketMQ/wiki/core-concept
Producer
发送消息到brokers，提供多种发送模式，synchronous，asynchronous和one-way
Consumer
从brokers获取消息，提供两种类型的消费者，PullConsumer，主动从brokers拉取消息，一旦拉到消息，应用程序就初始化消费进程。
PushConsumer，已在内部封装好了消息拉取，消费进度维护，其它必要的工作，留了一个回调接口给最终用户实现，在消息到来时将会被执行
Producer Group
相同角色的生产者被分组到一起，同一组内的生产者实例可以互相替换使用，去提交或回滚别人创建的事务。生产者足够强大，每个进程的每个组只允许有一个生产者实例
Consumer Group
相同角色的消费者被分组到一起，从消息消费这方面讲，消费者组很容易实现负载均衡和容错，组内的消费者必须有精确相同的topic订阅
Topic
Topic是一个分类，生产者基于它分发消息，消费者基于它拉取消息，Topic和生产者消费者之间有非常松散的关系。一个topic可以有0个到多个生产者，
一个生产者可以发送多个不同topic消息，一个topic可以被0个到多个消费者组订阅，一个消费者组可以订阅一个或多个topic（只要组内的消费者订阅一致就行了）
Message Queue
topic在内部从逻辑上被划分为一个或多个子topic，把这些子topic叫做message queues，这个概念在实现一些有价值的特性时起了主要作用，例如故障转移，最大并发等
Message
message封装了要投递的信息，消息必须指定一个topic，可以理解为要发送的目的地。还有一个可选的tag集合，还可以包含额外的key-value对
Tag
tag可以认为是子topic，提供了一个额外的灵活性，具有相同topic不同tag的消息目的不同但又相关联
Broker
broker是主角，它接收生产者发过来的消息，存储它们，并准备服务消费者对消息的获取，同样存储和消息消费相关的元数据，包括消费者组，消费进度偏移量，topic/queue信息
Name Server
提供路由信息，生产者和消费者通过topic查找broker列表来写入或读取消息
Message Model
Clustering（集群消息），Broadcasting（广播消息）
Message Order
当DefaultMQPushConsumer使用时，你可以决定是顺序消费消息还是并发消费消息，Orderly，对于每一个message queue，消息的消费顺序和发送顺序一样，如果要求全局的顺序一样，
那么一个topic只能有一个message queue，警告，如果指定了顺序消费，消息消费的最大并发数就是消费者组订阅的message queues个数。
Concurrently，消息消费的最大并发数只受到消费者客户端指定的线程池的限制

http://rocketmq.incubator.apache.org/docs/best-practice-namesvr/
Best Practice For NameServer
协调分布式系统的各个组件，管理topic路由信息，粗略地说有两部分组成，broker周期性地更新元数据到nameserver，nameserver服务客户端（生产者和消费者），
提供最新的路由信息。在启动broker和客户端前，需要把一个nameserver的地址列表告诉它们，以便它们连接。可以有四种方式，编程方式，在broker的配置文件中指定，
namesrvAddr=name-server-ip1:port;name-server-ip2:port，在客户端实例化时指定，
DefaultMQProducer producer = new DefaultMQProducer("please_rename_unique_group_name");
producer.setNamesrvAddr("name-server1-ip:port;name-server2-ip:port");
DefaultMQPushConsumer consumer = new DefaultMQPushConsumer("please_rename_unique_group_name");
consumer.setNamesrvAddr("name-server1-ip:port;name-server2-ip:port");
Java选项方式，在启动前通过连续Java选项rocketmq.namesrv.addr指定，环境变量方式，定义一个NAMESRV_ADDR环境变量，HTTP端点方式，可以通过一个http地址访问nameserver，
默认是http://jmenv.tbsite.net:8080/rocketmq/nsaddr，其中域名部分可以通过java选项rocketmq.namesrv.domain来重写，
地址部分可以通过java选项rocketmq.namesrv.domain.subgroup来重写，这种方式更加灵活，可以动态添加或删除nameserver节点，而对broker和客户端没有影响。
它们之间的优先级是Programmatic Way > Java Options > Environment Variable > HTTP Endpoint

http://rocketmq.incubator.apache.org/docs/best-practice-consumer/
Best Practice For Consumer
不同的消费者组可以独立地消费相同的topic，每个组都有自己的消费偏移量，每个组内的消费者订阅的topic必须完全一样。消息监听器，顺序消费，
消费者锁住每个MessageQueue确保一个接一个地消费，会造成性能损失，不建议抛异常，可以返回ConsumeOrderlyStatus.SUSPEND_CURRENT_QUEUE_A_MOMENT，并发消费，性能较好，
不建议抛异常，可以返回ConsumeConcurrentlyStatus.RECONSUME_LATER。消费状态，对于MessageListenerConcurrently，
可以返回RECONSUME_LATER来告知暂时无法消费稍后再试这条消息，可以继续消费其它消息。对于MessageListenerOrderly，比较关注顺序，不能跳过这个消息，
可以返回SUSPEND_CURRENT_QUEUE_A_MOMENT来告知暂停一会。监听器不建议被阻塞，最终消费者进程将卡住。线程数，消费者内部使用ThreadPoolExecutor来处理消费，
可以通过使用setConsumeThreadMin或setConsumeThreadMax来调整。从什么地方开始消费，CONSUME_FROM_LAST_OFFSET忽略历史消息，消费新产生的，
CONSUME_FROM_FIRST_OFFSET消费所有已存在的消息，CONSUME_FROM_TIMESTAMP消费某个指定的时间戳之后的。许多情况可能造成重复，比如生产者重发或消费者没有更新偏移量，
这时应该做额外的工作来去重，例如检查数据库主键。

http://rocketmq.incubator.apache.org/docs/best-practice-producer/
Best Practice For Producer
发送状态，当消息的isWaitStoreMsgOK=true时，有若干种状态，否则只要不抛异常总是返回SEND_OK。FLUSH_DISK_TIMEOUT，在同步刷盘时，指定的时间内没有刷完，
FLUSH_SLAVE_TIMEOUT，在broker是同步master时，从节点在指定的时间内没有同步完，SLAVE_NOT_AVAILABLE，当broker是同步master时，没有配置从节点，SEND_OK，
并不意味着可靠，如果不能容忍消息丢失，应该启用同步master或同步刷盘。重复或丢失，当FLUSH_DISK_TIMEOUT，FLUSH_SLAVE_TIMEOUT或broker关闭时消息可能会丢失，
你可以选择不处理，消息可能真丢失了，你可以选择重发，消息可能重复，通常建议重发，且在消费时采用某种方法去重。注意，当是SLAVE_NOT_AVAILABLE时，重发也没有用，
这时可以给管理员发告警。超时，当超过指定时间还没有响应的话，客户端抛出RemotingTimeoutException异常，可以在发送时send(msg, timeout)重新指定超时时间，
不建议时间太短，因为要刷盘或同步给从节点，如果比syncFlushTimeout大得多的话也没有什么用，因为在客户端超时前broker会返回FLUSH_DISK_TIMEOUT或FLUSH_SLAVE_TIMEOUT。
建议消息不大于512K，默认发送是同步的，可以使用异步发送send(msg, callback)带回调。生产者组，通常没有什么影响，但涉及到事务时需要注意，
通常一个JVM里的一个生产者组只允许创建一个生产者实例。生产者是线程安全的。如果想在一个JVM里多于一个生产者实例，例如用于大数据处理，
请使用异步发送且3到5个实例就足够了，为每个生产者实例设置名称setInstanceName

http://rocketmq.incubator.apache.org/docs/best-practice-broker/
Best Practice For Broker
broker有三种角色，ASYNC_MASTER，SYNC_MASTER或SLAVE，如果不能容忍消息丢失，建议SYNC_MASTER加上SLAVE，可以容忍丢失希望可用性，建议ASYNC_MASTER加上SLAVE，
如果想简单一些，建议ASYNC_MASTER不要SLAVE。刷盘类型，建议ASYNC_FLUSH，因为SYNC_FLUSH会造成较多性能损失，如果希望可靠性，建议SYNC_MASTER加上SLAVE

